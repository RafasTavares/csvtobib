package ch.unibe.scg.csvtobib;

import org.apache.commons.csv.CSVRecord;
import org.jbibtex.BibTeXEntry;

/**
 * The CSV to BibTeX interface. This interface is supposed to be implemented by
 * each value in an enum, where each value represents a BibTeX field we're
 * trying to extract (while we try to convert a CSV file to BibTeX, the mapping
 * is backwards).
 */
public interface CSVToBibTeX {

	/*
	 * some BibTeX key definitions missing in jbibtex
	 */
	public static final org.jbibtex.Key KEY_ABSTRACT = new org.jbibtex.Key("abstract");
	public static final org.jbibtex.Key KEY_ISSN = new org.jbibtex.Key("ISSN");
	public static final org.jbibtex.Key KEY_KEYWORDS = new org.jbibtex.Key("keywords");

	/**
	 * Extracts a value (of a BibTeX field) from the CSV record.
	 *
	 * @param type the type of the BibTeX entry (already determined).
	 * @param record the CSV record.
	 * @return the value for the specified BibTeX field, extracted from the CSV
	 * record, or an empty string.
	 */
	public String extract(org.jbibtex.Key type, CSVRecord record);

	/**
	 * Extracts the BibTeX entry type from the CSV record.
	 *
	 * @param record the CSV record.
	 * @return the BibTeX entry type (e.g. ARTICLE, INPROCEEDINGS, ...).
	 */
	public org.jbibtex.Key getBibTeXEntryType(CSVRecord record);

	/**
	 * Extracts the (unique) BibTeX key.
	 *
	 * @param type the BibTeX entry type.
	 * @param record the CSV record.
	 * @return the (unique) BibTeX key. May be automatically generated as a
	 * fallback.
	 */
	public String getBibTeXKey(org.jbibtex.Key type, CSVRecord record);

	/**
	 * Return the BibTeX field.
	 *
	 * @return the BibTex field.
	 */
	public org.jbibtex.Key getBibTeXField();

	/**
	 * Extracts the field in a CSV record.
	 *
	 * @param field the CSV field.
	 * @param record the CSV record.
	 * @return the value in the CSV field, or an empty string.
	 */
	default String getIfSet(String field, CSVRecord record) {
		if (record.isSet(field)) {
			return record.get(field);
		}
		return "";
	}

	/**
	 * Returns the number of automatically generated keys.
	 *
	 * @return the number of automatically generated keys.
	 */
	default int getNumAutoGeneratedKeys() {
		return 0;
	}

	/**
	 * Checks whether this is a valid BibTeX entry. BibTeX entries may be
	 * discarded if they're invalid (e.g. in case of incomplete records).
	 *
	 * @param entry the extracted BibTeX entry.
	 * @return {@code true} if this is a valid BibTeX entry, {@code false}
	 * otherwise.
	 */
	default boolean isValidEntry(BibTeXEntry entry) {
		return true;
	}

	/**
	 * Returns the number of invalid BibTeX entries.
	 *
	 * @return the number of invalid BibTeX entries.
	 */
	default int getNumInvalidEntries() {
		return 0;
	}

}
